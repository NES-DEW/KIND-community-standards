{
  "hash": "b72085ec086ae5a316684658a0cba0b1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: R beginner's club 2025-01-09\nexecute: \n  output: markdown\n  echo: true\n  freeze: auto\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n## What's this session about\n\nThis session is about some top tips for working between Excel and R, mainly concentrating on using R for tidying up messy Excel data. We'll start with a lot of package loading:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# standard toolkit\nlibrary(dplyr)\nlibrary(tools)\n\n# tidying data\nlibrary(tidyr)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(janitor)\nlibrary(skimr)\n\n# Excel reading and writing\nlibrary(readxl)\nlibrary(writexl)\n```\n:::\n\n\n\n## Reading Excel files\n\nR is exceptionally useful as a way of automating tricky Excel tasks. Let's say we have some slightly broken Excel data. We can read that into R in a couple of different ways. If you're using Rstudio, the path of least resistance is to find your data in the `Files` pane, and click on it:\n\n![Import Dataset...](images/clipboard-3695209793.png)\n\nThat brings up an interactive data import tool which, joy of joys, writes the import code for you:\n\n![Import code](images/clipboard-3240777953.png)\n\nYou can then copy that code into your script so that your data loading is repeatable - and you can tweak it to suit:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw <- read_xlsx(here::here(\"rbc/data/raw.xlsx\")) # little bit of here to make the paths behave\nhead(raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 15\n  PracticeCode GPPracticeName         PracticeListSize AddressLine1 AddressLine2\n         <dbl> <chr>                  <chr>            <chr>        <chr>       \n1        55003 Thurso & Halkirk Medi… 6143             Thurso & Ha… 69 Princes …\n2        55041 Nairn Healthcare Group 15756            Nairn Healt… Nairn Town …\n3        55075 Dunbeath Surgery       685              Dunbeath Su… Achorn Road \n4        55080 Canisbay & Castletown… 2750             Canisbay & … Murrayfield \n5        55145 The Pearson Practice   2647             The Pearson… Wick Medica…\n6        55183 Armadale Medical Prac… 925              Armadale Me… Armadale    \n# ℹ 10 more variables: AddressLine3 <chr>, AddressLine4 <chr>, Postcode <chr>,\n#   TelephoneNumber <chr>, PracticeType <chr>, `date collected` <chr>,\n#   HB <chr>, HSCP <chr>, DataZone <chr>, GPCluster <chr>\n```\n\n\n:::\n:::\n\n\n\n(this is a subset of [Public Health Scotland's open data on GP practices](https://www.opendata.nhs.scot/dataset/gp-practice-contact-details-and-list-sizes). I should emphasise that all the data problems in this sample have been deliberately introduced by me demonstration purposes - the original dataset is lovely and clean)\n\nIt's also worth saying that Excel files are incredibly complicated. In this session, we'll keep things simple, but there are lots of powerful R tools out there if you need more control (especially the [openxlsx2 package](https://cran.r-project.org/web/packages/openxlsx2/index.html)).\n\n## Initial exploration: some tools for understanding what you've loaded\n\nThe base-R way, beyond eyeballing the data with `View()`, is to use `summary` or `str`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PracticeCode   GPPracticeName     PracticeListSize   AddressLine1      \n Min.   :55003   Length:64          Length:64          Length:64         \n 1st Qu.:55341   Class :character   Class :character   Class :character  \n Median :55589   Mode  :character   Mode  :character   Mode  :character  \n Mean   :55606                                                           \n 3rd Qu.:55846                                                           \n Max.   :56576                                                           \n AddressLine2       AddressLine3       AddressLine4         Postcode        \n Length:64          Length:64          Length:64          Length:64         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TelephoneNumber    PracticeType       date collected          HB           \n Length:64          Length:64          Length:64          Length:64         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n     HSCP             DataZone          GPCluster        \n Length:64          Length:64          Length:64         \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n```\n\n\n:::\n\n```{.r .cell-code}\nraw |>\n  str()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [64 × 15] (S3: tbl_df/tbl/data.frame)\n $ PracticeCode    : num [1:64] 55003 55041 55075 55080 55145 ...\n $ GPPracticeName  : chr [1:64] \"Thurso & Halkirk Medical Practice\" \"Nairn Healthcare Group\" \"Dunbeath Surgery\" \"Canisbay & Castletown Joint Medical Practice\" ...\n $ PracticeListSize: chr [1:64] \"6143\" \"15756\" \"685\" \"2750\" ...\n $ AddressLine1    : chr [1:64] \"Thurso & Halkirk Medical Practice\" \"Nairn Healthcare Group\" \"Dunbeath Surgery\" \"Canisbay & Castletown Joint Medical Practice\" ...\n $ AddressLine2    : chr [1:64] \"69 Princes Street\" \"Nairn Town and County Hospital\" \"Achorn Road\" \"Murrayfield\" ...\n $ AddressLine3    : chr [1:64] \"Thurso\" \"Cawdor Road\" \"Dunbeath\" \"Castletown\" ...\n $ AddressLine4    : chr [1:64] \"Caithness\" \"Nairn\" \"Caithness\" NA ...\n $ Postcode        : chr [1:64] \"KW14 7DH\" \"IV12 5EE\" \"KW6 6EZ\" \"KW14 8TY\" ...\n $ TelephoneNumber : chr [1:64] \"01847   895   986\" \"01667   452   096\" \"01593   731   205\" \"01847   821   205\" ...\n $ PracticeType    : chr [1:64] \"17J\" \"17J\" \"17J\" \"17J\" ...\n $ date collected  : chr [1:64] \"45654\" \"45659\" \"45646\" \"45655\" ...\n $ HB              : chr [1:64] \"S08000022\" \"S08000022\" \"S08000022\" \"S08000022\" ...\n $ HSCP            : chr [1:64] \"S37000016\" \"S37000016\" \"S37000016\" \"S37000016\" ...\n $ DataZone        : chr [1:64] \"S01010805\" \"S01010556\" \"S01010772\" NA ...\n $ GPCluster       : chr [1:64] \"NHSH (North) Caithness\" \"NHSH (North) Badenoch & Nairn\" \"NHSH (North) West Sutherland\" \"NHSH (North) Caithness\" ...\n```\n\n\n:::\n:::\n\n\n\nPersonally, I find `summary()` actively unhelpful, but `str()` does have it's place, especially as a quick check of the data types you have in each column. You might also like to try `dplyr::glimpse()` for a tweaked version of `str()` that you can use in piped code to understand what's going on:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  glimpse() |>\n  count(GPCluster) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 64\nColumns: 15\n$ PracticeCode     <dbl> 55003, 55041, 55075, 55080, 55145, 55183, 55201, 5522…\n$ GPPracticeName   <chr> \"Thurso & Halkirk Medical Practice\", \"Nairn Healthcar…\n$ PracticeListSize <chr> \"6143\", \"15756\", \"685\", \"2750\", \"2647\", \"925\", \"2858\"…\n$ AddressLine1     <chr> \"Thurso & Halkirk Medical Practice\", \"Nairn Healthcar…\n$ AddressLine2     <chr> \"69 Princes Street\", \"Nairn Town and County Hospital\"…\n$ AddressLine3     <chr> \"Thurso\", \"Cawdor Road\", \"Dunbeath\", \"Castletown\", \"M…\n$ AddressLine4     <chr> \"Caithness\", \"Nairn\", \"Caithness\", NA, \"Wick\", \"Caith…\n$ Postcode         <chr> \"KW14 7DH\", \"IV12 5EE\", \"KW6 6EZ\", \"KW14 8TY\", \"KW1 5…\n$ TelephoneNumber  <chr> \"01847   895   986\", \"01667   452   096\", \"01593   73…\n$ PracticeType     <chr> \"17J\", \"17J\", \"17J\", \"17J\", \"17J\", \"2C\", \"17J\", \"17J\"…\n$ `date collected` <chr> \"45654\", \"45659\", \"45646\", \"45655\", \"45664\", \"45661\",…\n$ HB               <chr> \"S08000022\", \"S08000022\", \"S08000022\", \"S08000022\", \"…\n$ HSCP             <chr> \"S37000016\", \"S37000016\", \"S37000016\", \"S37000016\", \"…\n$ DataZone         <chr> \"S01010805\", \"S01010556\", \"S01010772\", NA, \"S01010781…\n$ GPCluster        <chr> \"NHSH (North) Caithness\", \"NHSH (North) Badenoch & Na…\nRows: 16\nColumns: 2\n$ GPCluster <chr> \"NHS highland(North) West Sutherland\", \"NHSH (Norf) Skye & L…\n$ n         <int> 1, 1, 6, 8, 3, 4, 5, 3, 4, 8, 4, 6, 4, 5, 1, 1\n```\n\n\n:::\n:::\n\n\n\nA much more capable alternative for inspecting your data is the skimr package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  skimr::skim()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |     |\n|:------------------------|:----|\n|Name                     |raw  |\n|Number of rows           |64   |\n|Number of columns        |15   |\n|_______________________  |     |\n|Column type frequency:   |     |\n|character                |14   |\n|numeric                  |1    |\n|________________________ |     |\n|Group variables          |None |\n\n\n**Variable type: character**\n\n|skim_variable    | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:----------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|GPPracticeName   |         0|          1.00|  14|  51|     0|       62|          0|\n|PracticeListSize |         1|          0.98|   3|   5|     0|       61|          0|\n|AddressLine1     |         0|          1.00|  14|  51|     0|       62|          0|\n|AddressLine2     |         1|          0.98|   6|  40|     0|       56|          0|\n|AddressLine3     |         2|          0.97|   5|  26|     0|       47|          0|\n|AddressLine4     |        21|          0.67|   4|  17|     0|       31|          0|\n|Postcode         |         0|          1.00|   6|  11|     0|       58|          0|\n|TelephoneNumber  |         1|          0.98|  17|  18|     0|       61|          0|\n|PracticeType     |         0|          1.00|   2|   3|     0|        3|          0|\n|date collected   |         0|          1.00|   5|  13|     0|       22|          0|\n|HB               |         2|          0.97|   9|   9|     0|        1|          0|\n|HSCP             |         2|          0.97|   9|   9|     0|        1|          0|\n|DataZone         |         2|          0.97|   9|   9|     0|       51|          0|\n|GPCluster        |         1|          0.98|  17|  35|     0|       15|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|     mean|     sd|    p0|   p25|   p50|      p75|  p100|hist  |\n|:-------------|---------:|-------------:|--------:|------:|-----:|-----:|-----:|--------:|-----:|:-----|\n|PracticeCode  |         0|             1| 55606.09| 348.92| 55003| 55341| 55589| 55845.75| 56576|▅▇▇▂▁ |\n\n\n:::\n:::\n\n\n\nThat treats different data types differently, so if we coerce one of our columns to numeric, and `skim` again, we'll get different output:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  mutate(PracticeListSize = as.numeric(PracticeListSize)) |>\n  skimr::skim()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |                             |\n|:------------------------|:----------------------------|\n|Name                     |mutate(raw, PracticeListS... |\n|Number of rows           |64                           |\n|Number of columns        |15                           |\n|_______________________  |                             |\n|Column type frequency:   |                             |\n|character                |13                           |\n|numeric                  |2                            |\n|________________________ |                             |\n|Group variables          |None                         |\n\n\n**Variable type: character**\n\n|skim_variable   | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:---------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|GPPracticeName  |         0|          1.00|  14|  51|     0|       62|          0|\n|AddressLine1    |         0|          1.00|  14|  51|     0|       62|          0|\n|AddressLine2    |         1|          0.98|   6|  40|     0|       56|          0|\n|AddressLine3    |         2|          0.97|   5|  26|     0|       47|          0|\n|AddressLine4    |        21|          0.67|   4|  17|     0|       31|          0|\n|Postcode        |         0|          1.00|   6|  11|     0|       58|          0|\n|TelephoneNumber |         1|          0.98|  17|  18|     0|       61|          0|\n|PracticeType    |         0|          1.00|   2|   3|     0|        3|          0|\n|date collected  |         0|          1.00|   5|  13|     0|       22|          0|\n|HB              |         2|          0.97|   9|   9|     0|        1|          0|\n|HSCP            |         2|          0.97|   9|   9|     0|        1|          0|\n|DataZone        |         2|          0.97|   9|   9|     0|       51|          0|\n|GPCluster       |         1|          0.98|  17|  35|     0|       15|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable    | n_missing| complete_rate|     mean|      sd|    p0|   p25|   p50|      p75|  p100|hist  |\n|:----------------|---------:|-------------:|--------:|-------:|-----:|-----:|-----:|--------:|-----:|:-----|\n|PracticeCode     |         0|          1.00| 55606.09|  348.92| 55003| 55341| 55589| 55845.75| 56576|▅▇▇▂▁ |\n|PracticeListSize |         4|          0.94|  4016.20| 3516.20|   244|  1486|  2806|  5704.75| 15756|▇▃▁▁▁ |\n\n\n:::\n:::\n\n\n\nAnd you can wrangle the output of `skim` in a few different ways:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  skimr::skim() |>\n  select(n_missing) # just look at one metric\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 1\n   n_missing\n       <int>\n 1         0\n 2         1\n 3         0\n 4         1\n 5         2\n 6        21\n 7         0\n 8         1\n 9         0\n10         0\n11         2\n12         2\n13         2\n14         1\n15         0\n```\n\n\n:::\n\n```{.r .cell-code}\nraw |>\n  skimr::skim() |>\n  yank(\"numeric\") # an alternative way of looking at one metric\n```\n\n::: {.cell-output-display}\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|     mean|     sd|    p0|   p25|   p50|      p75|  p100|hist  |\n|:-------------|---------:|-------------:|--------:|------:|-----:|-----:|-----:|--------:|-----:|:-----|\n|PracticeCode  |         0|             1| 55606.09| 348.92| 55003| 55341| 55589| 55845.75| 56576|▅▇▇▂▁ |\n\n\n\n:::\n\n```{.r .cell-code}\nraw |>\n  mutate(PracticeListSize = as.numeric(PracticeListSize),\n         PracticeCode = as.character(PracticeCode)) |>\n  group_by(PracticeType) |>\n  skim()  # look at groups and columns together\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |              |\n|:------------------------|:-------------|\n|Name                     |group_by(...) |\n|Number of rows           |64            |\n|Number of columns        |15            |\n|_______________________  |              |\n|Column type frequency:   |              |\n|character                |13            |\n|numeric                  |1             |\n|________________________ |              |\n|Group variables          |PracticeType  |\n\n\n**Variable type: character**\n\n|skim_variable   |PracticeType | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:---------------|:------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|PracticeCode    |17C          |         0|          1.00|   5|   5|     0|        1|          0|\n|PracticeCode    |17J          |         0|          1.00|   5|   5|     0|       46|          0|\n|PracticeCode    |2C           |         0|          1.00|   5|   5|     0|       15|          0|\n|GPPracticeName  |17C          |         0|          1.00|  29|  29|     0|        1|          0|\n|GPPracticeName  |17J          |         0|          1.00|  14|  44|     0|       46|          0|\n|GPPracticeName  |2C           |         0|          1.00|  18|  51|     0|       15|          0|\n|AddressLine1    |17C          |         0|          1.00|  29|  29|     0|        1|          0|\n|AddressLine1    |17J          |         0|          1.00|  14|  44|     0|       46|          0|\n|AddressLine1    |2C           |         0|          1.00|  18|  51|     0|       15|          0|\n|AddressLine2    |17C          |         0|          1.00|  11|  11|     0|        1|          0|\n|AddressLine2    |17J          |         1|          0.98|   6|  40|     0|       41|          0|\n|AddressLine2    |2C           |         0|          1.00|   7|  23|     0|       15|          0|\n|AddressLine3    |17C          |         0|          1.00|  12|  12|     0|        1|          0|\n|AddressLine3    |17J          |         1|          0.98|   5|  26|     0|       34|          0|\n|AddressLine3    |2C           |         1|          0.93|   6|  20|     0|       13|          0|\n|AddressLine4    |17C          |         1|          0.00|  NA|  NA|     0|        0|          0|\n|AddressLine4    |17J          |        18|          0.62|   4|  16|     0|       22|          0|\n|AddressLine4    |2C           |         2|          0.87|   6|  17|     0|       12|          0|\n|Postcode        |17C          |         0|          1.00|   8|   8|     0|        1|          0|\n|Postcode        |17J          |         0|          1.00|   6|  11|     0|       42|          0|\n|Postcode        |2C           |         0|          1.00|   7|   9|     0|       15|          0|\n|TelephoneNumber |17C          |         0|          1.00|  17|  17|     0|        1|          0|\n|TelephoneNumber |17J          |         1|          0.98|  17|  18|     0|       45|          0|\n|TelephoneNumber |2C           |         0|          1.00|  17|  17|     0|       15|          0|\n|date collected  |17C          |         0|          1.00|   5|   5|     0|        1|          0|\n|date collected  |17J          |         0|          1.00|   5|  13|     0|       19|          0|\n|date collected  |2C           |         0|          1.00|   5|  10|     0|       13|          0|\n|HB              |17C          |         0|          1.00|   9|   9|     0|        1|          0|\n|HB              |17J          |         2|          0.96|   9|   9|     0|        1|          0|\n|HB              |2C           |         0|          1.00|   9|   9|     0|        1|          0|\n|HSCP            |17C          |         0|          1.00|   9|   9|     0|        1|          0|\n|HSCP            |17J          |         2|          0.96|   9|   9|     0|        1|          0|\n|HSCP            |2C           |         0|          1.00|   9|   9|     0|        1|          0|\n|DataZone        |17C          |         0|          1.00|   9|   9|     0|        1|          0|\n|DataZone        |17J          |         1|          0.98|   9|   9|     0|       38|          0|\n|DataZone        |2C           |         1|          0.93|   9|   9|     0|       12|          0|\n|GPCluster       |17C          |         0|          1.00|  21|  21|     0|        1|          0|\n|GPCluster       |17J          |         0|          1.00|  17|  32|     0|       13|          0|\n|GPCluster       |2C           |         1|          0.93|  17|  35|     0|        9|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable    |PracticeType | n_missing| complete_rate|    mean|      sd|  p0|    p25|    p50|    p75|  p100|hist  |\n|:----------------|:------------|---------:|-------------:|-------:|-------:|---:|------:|------:|------:|-----:|:-----|\n|PracticeListSize |17C          |         0|          1.00|  928.00|      NA| 928|  928.0|  928.0|  928.0|   928|▁▁▇▁▁ |\n|PracticeListSize |17J          |         3|          0.94| 4419.67| 3153.60| 475| 2316.0| 3458.0| 6131.0| 15756|▇▅▁▁▁ |\n|PracticeListSize |2C           |         1|          0.93| 2939.93| 4461.68| 244|  551.5| 1249.5| 2364.5| 13568|▇▁▁▁▁ |\n\n\n:::\n\n```{.r .cell-code}\nraw |>\n  skimr::skim_tee() # like glimpse, produce skim output but return the original data to allow use inside with piped code \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n── Data Summary ────────────────────────\n                           Values\nName                       data  \nNumber of rows             64    \nNumber of columns          15    \n_______________________          \nColumn type frequency:           \n  character                14    \n  numeric                  1     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n   skim_variable    n_missing complete_rate min max empty n_unique whitespace\n 1 GPPracticeName           0         1      14  51     0       62          0\n 2 PracticeListSize         1         0.984   3   5     0       61          0\n 3 AddressLine1             0         1      14  51     0       62          0\n 4 AddressLine2             1         0.984   6  40     0       56          0\n 5 AddressLine3             2         0.969   5  26     0       47          0\n 6 AddressLine4            21         0.672   4  17     0       31          0\n 7 Postcode                 0         1       6  11     0       58          0\n 8 TelephoneNumber          1         0.984  17  18     0       61          0\n 9 PracticeType             0         1       2   3     0        3          0\n10 date collected           0         1       5  13     0       22          0\n11 HB                       2         0.969   9   9     0        1          0\n12 HSCP                     2         0.969   9   9     0        1          0\n13 DataZone                 2         0.969   9   9     0       51          0\n14 GPCluster                1         0.984  17  35     0       15          0\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate   mean   sd    p0   p25   p50    p75\n1 PracticeCode          0             1 55606. 349. 55003 55341 55589 55846.\n   p100 hist \n1 56576 ▅▇▇▂▁\n```\n\n\n:::\n\n```{.r .cell-code}\nraw |>\n  skimr::skim() |>\n  partition() # split different data types into separate list items\n```\n\n::: {.cell-output-display}\n\n\n\n**Variable type: character**\n\n|skim_variable    | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:----------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|GPPracticeName   |         0|          1.00|  14|  51|     0|       62|          0|\n|PracticeListSize |         1|          0.98|   3|   5|     0|       61|          0|\n|AddressLine1     |         0|          1.00|  14|  51|     0|       62|          0|\n|AddressLine2     |         1|          0.98|   6|  40|     0|       56|          0|\n|AddressLine3     |         2|          0.97|   5|  26|     0|       47|          0|\n|AddressLine4     |        21|          0.67|   4|  17|     0|       31|          0|\n|Postcode         |         0|          1.00|   6|  11|     0|       58|          0|\n|TelephoneNumber  |         1|          0.98|  17|  18|     0|       61|          0|\n|PracticeType     |         0|          1.00|   2|   3|     0|        3|          0|\n|date collected   |         0|          1.00|   5|  13|     0|       22|          0|\n|HB               |         2|          0.97|   9|   9|     0|        1|          0|\n|HSCP             |         2|          0.97|   9|   9|     0|        1|          0|\n|DataZone         |         2|          0.97|   9|   9|     0|       51|          0|\n|GPCluster        |         1|          0.98|  17|  35|     0|       15|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|     mean|     sd|    p0|   p25|   p50|      p75|  p100|hist  |\n|:-------------|---------:|-------------:|--------:|------:|-----:|-----:|-----:|--------:|-----:|:-----|\n|PracticeCode  |         0|             1| 55606.09| 348.92| 55003| 55341| 55589| 55845.75| 56576|▅▇▇▂▁ |\n\n\n:::\n:::\n\n\n\n## Fixing data types\n\nOur dataset initially doesn't look too horrible. But we can generate some very confusing results from it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(raw$PracticeListSize, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"10000\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(raw$PracticeListSize, na.rm = T) # what!\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"990\"\n```\n\n\n:::\n:::\n\n\n\nWhat's happening here is that R is putting our results into alphabetical order, rather than numerical. That's because these numbers are stored as if they were text owing to a couple of anomalous data points:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw$PracticeListSize[grep(\"[^0-9]\", raw$PracticeListSize)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"187*\"  \"9738a\" \"5595c\"\n```\n\n\n:::\n:::\n\n\n\nWe could use `as.numeric` to remove everything other than proper numbers:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  mutate(PracticeListSize = as.numeric(PracticeListSize))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 64 × 15\n   PracticeCode GPPracticeName        PracticeListSize AddressLine1 AddressLine2\n          <dbl> <chr>                            <dbl> <chr>        <chr>       \n 1        55003 Thurso & Halkirk Med…             6143 Thurso & Ha… 69 Princes …\n 2        55041 Nairn Healthcare Gro…            15756 Nairn Healt… Nairn Town …\n 3        55075 Dunbeath Surgery                   685 Dunbeath Su… Achorn Road \n 4        55080 Canisbay & Castletow…             2750 Canisbay & … Murrayfield \n 5        55145 The Pearson Practice              2647 The Pearson… Wick Medica…\n 6        55183 Armadale Medical Pra…              925 Armadale Me… Armadale    \n 7        55201 Dornoch Medical Prac…             2858 Dornoch Med… Shore Road  \n 8        55220 Golspie Medical Prac…             1993 Golspie Med… Golspie Hea…\n 9        55249 Lairg Health Centre               1222 Lairg Healt… Main Street \n10        55253 Assynt Medical Pract…              952 Assynt Medi… 6 Main Stre…\n# ℹ 54 more rows\n# ℹ 10 more variables: AddressLine3 <chr>, AddressLine4 <chr>, Postcode <chr>,\n#   TelephoneNumber <chr>, PracticeType <chr>, `date collected` <chr>,\n#   HB <chr>, HSCP <chr>, DataZone <chr>, GPCluster <chr>\n```\n\n\n:::\n:::\n\n\n\nOr, rather better, we could use `readr::parse_number` which will do a bit of inference to try and preserve anything that looks like a number:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  mutate(PracticeListSize = parse_number(PracticeListSize))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 64 × 15\n   PracticeCode GPPracticeName        PracticeListSize AddressLine1 AddressLine2\n          <dbl> <chr>                            <dbl> <chr>        <chr>       \n 1        55003 Thurso & Halkirk Med…             6143 Thurso & Ha… 69 Princes …\n 2        55041 Nairn Healthcare Gro…            15756 Nairn Healt… Nairn Town …\n 3        55075 Dunbeath Surgery                   685 Dunbeath Su… Achorn Road \n 4        55080 Canisbay & Castletow…             2750 Canisbay & … Murrayfield \n 5        55145 The Pearson Practice              2647 The Pearson… Wick Medica…\n 6        55183 Armadale Medical Pra…              925 Armadale Me… Armadale    \n 7        55201 Dornoch Medical Prac…             2858 Dornoch Med… Shore Road  \n 8        55220 Golspie Medical Prac…             1993 Golspie Med… Golspie Hea…\n 9        55249 Lairg Health Centre               1222 Lairg Healt… Main Street \n10        55253 Assynt Medical Pract…              952 Assynt Medi… 6 Main Stre…\n# ℹ 54 more rows\n# ℹ 10 more variables: AddressLine3 <chr>, AddressLine4 <chr>, Postcode <chr>,\n#   TelephoneNumber <chr>, PracticeType <chr>, `date collected` <chr>,\n#   HB <chr>, HSCP <chr>, DataZone <chr>, GPCluster <chr>\n```\n\n\n:::\n:::\n\n\n\nWe also have some horrible dates: as well as a few non-standard dates, mostof the dates here are in Excel 1900 format:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  dplyr::filter(stringr::str_detect(`date collected`, \"eve\")) |>\n  select(PracticeCode, `date collected`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  PracticeCode `date collected`\n         <dbl> <chr>           \n1        55291 Christmas eve   \n```\n\n\n:::\n\n```{.r .cell-code}\nraw |>\n  select(`date collected`) |>\n  slice_sample(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  `date collected`\n  <chr>           \n1 45659           \n2 45664           \n3 45646           \n4 45662           \n5 45664           \n```\n\n\n:::\n:::\n\n\n\nHorrible news: Excel counts days from Jan 1st 1900, while R counts days from Jan 1st 1970. That means that you need to subtract those 70 years to convert from one to the other, and then use lubridates `as_date` to convert that number of days into a proper R date. The quick-and-dirty way - just subtract 70 years-worth of days:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  mutate(`date collected` = as_date(as.numeric(`date collected`) - 25569)) |>\n  select(`date collected`) |>\n  slice_sample(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  `date collected`\n  <date>          \n1 2024-12-24      \n2 2025-01-02      \n3 2024-12-31      \n4 2024-12-28      \n5 2025-01-02      \n```\n\n\n:::\n:::\n\n\n\nA nicer, more explicit, approach is to set an origin for your `as_date` to count from. Weirdly, because of a decades-old glitch in Excel dates, that's two days before the 1st Jan 1900:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  mutate(`date collected` = as_date(as.numeric(`date collected`), origin = \"1899-12-30\")) |>\n  select(`date collected`) |>\n  slice_sample(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  `date collected`\n  <date>          \n1 2025-01-01      \n2 2025-01-02      \n3 2025-01-05      \n4 2025-01-09      \n5 2025-01-01      \n```\n\n\n:::\n:::\n\n\n\nThere's lots to say about date parsing - and would recommend coming to our [lubridate session](https://nes-dew.github.io/KIND-training/r_training/dates_and_times_with_lubridate.html) if you'd like to know more. \n\n## Writing back to Excel\n\nOnce you've had a play with your data, and cleaned up as needed, writing back to a basic Excel sheet is straightforward:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw |>\n  mutate(PracticeListSize = parse_number(PracticeListSize)) |>\n  mutate(date = parse_number(`date collected`)) |>\n  mutate(date = as_date(date, origin = \"1899-12-30\")) |>\n  write_xlsx(here::here(\"rbc/data/cooked.xlsx\"))\n```\n:::\n\n\n\nYou can have a play with the data yourself:\n\n+ [raw data](data/raw.xlsx)\n+ [cooked data](data/cooked.xlsx)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}